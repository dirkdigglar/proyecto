#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <vector>
#include <fstream>
using namespace std;

struct juego{
    string nombre;
    vector<string> categoria;
    string descripcion;
    double precio;
    int valorar_gusta;
    int valorar_no_gusta;

};

struct perfil{
    string user;
    string contrasena;
    vector<juego> compras;
    vector<int> key;
    double saldo;
};

struct tienda{
    vector<juego> catalogo;
};


int posicionUsuario(perfil login, vector<perfil> guardarcuentas, int indice){ ////BUSCAR POSICION DEL USUARIO EN EL VECTOR
///////////////////////BUSCAR POSICION DE LA CUENTA;
    int indice;
    for(int i=0; i<cuenta.user.size(); i++){
        if(cuenta[i].user==login.user){
            indice=i;
        }
    }

    return indice;
}

void existecuentausuario(perfil& cuenta, vector<perfil> guardarcuentas, bool& verificar){
    cout<<"introduce el usuario: " <<endl;
    cin>>cuenta.user;
    cout<<"introduce la contrasena: " <<endl;
    cin>>cuenta.contrasena;
    for(int i=0; i<guardarcuentas.size(); i++){
        if(guardarcuentas[i].user==cuenta.user and guardarcuentas[i].contrasena==cuenta.contrasena){
            verificar=true;
        }
    }
    cout<<"---------------------------------------------------" <<endl;
}

void menuUsuarionoExist(int& elegir){
    cout<<"el usuario o la contrasena no existe." <<endl;
    cout<<"1. volver a probar." <<endl;
    cout<<"2. crear cuenta. ";
    cin>>elegir;
    cout<<endl <<"----------------------------------------------------" <<endl;
}

void crearNuevoUsuario(perfil& nuevo, vector<perfil>& guardarcuentas, perfil login, bool verificar){
    cout<<endl <<"Introduce la nueva identificacion, porfavor: " <<endl;
    cout<<"introduce un nuevo usuario: ";
    cin>>nuevo.user;
    cout<<"introduce una nueva contrasena: ";
    cin>>nuevo.contrasena;
    guardarcuentas.push_back(nuevo);
    guardarcuentas.push_back(nuevo);
    cout<<endl <<"----------------------------------------------------" <<endl;
}

void MenuPrincipal(int elegir, string categoria){//cuenta, categoria de juegos, buscar juego, preferencias usuario, salir.
    cout<<"1. Cuenta" <<endl;
    cout<<"2. Categorias preferidas" <<endl;
    cout<<"3. Buscar juegos en la tienda" <<endl;
    cout<<"4. juegos segun categoria" <<endl;
    cout<<"5. Salir" <<endl;
    cin>>elegir;
    cout<<"------------------------------------------------";
    //if(elegir==1) //menu cuenta;
    //if(elegir==2) //menu categorias preferidas
//    if(elegir==3) mostrarCategorias(categoria, elegir);
    //if(elegir==4) //menu categoria de juegos.
    //else{return 0;}

}

void mostrarCategorias(string& categoria, int& elegir){
    //////////////////////////////////////SOLO LEE LA LISTA DE CATEGORIAS Y LAS MUESTRA POR PANTALLA.
    int x=1;
    ifstream categoriabazar("categorias.txt");
    cout<<endl <<"Categorias: "<<endl <<endl;
    while(categoriabazar>>categoria){
       cout<<x <<". " <<categoria <<endl;
       x++;
    }
    cin>>elegir;
    cout<<"------------------------------------------------";
}

void prefUsuario(perfil user){
    vector<string> pref;
    vector<int> repeticiones;
    /////////////////////////////////////////CONTAR LAS VECES QUE SE REPITE UNA CATEGOÍA
    for(int i=0; i<user.compras.size(); i++){
        for(int k=0; k<i; i++){
            if(user.compras[i].categoria==user.compras[k].categoria){
                repeticiones[i]++;
            }
        }
    }
    ////////////////////////////////////////ORDENAR DE MÁS REPETIDOS A MENOS
    int pivote;
    for(int i=0; i<user.compras.size()-1; i++){
        for(int k=0; k<(user.compras.size()-1-i); k++){
            if(repeticiones[i]>repeticiones[i+1]){
                pivote=repeticiones[i];
                repeticiones[i]=repeticiones[i+1];
                repeticiones[i+1]=pivote;
            }
        }
    }
    ////////////////////////////////////////MOSTRAR LAS CATEGORÍAS POR ORDEN
    cout<<"Categorias preferidas del usuario" <<endl;
    for(int i=0; i<user.compras.size(); i++){
        cout<<i+1 <<". " <<repeticiones[i] <<endl;
    }
    cout<<"-------------------------------------------";
}

void key(perfil& keyUnica){
    ///////////////////////////////GENERAR KEY Y GUARDARLA
    int x=0;
    bool repetido=false;
    int indicekey;
    while(x==0 or repetido==true){
        keyUnica.key.push_back(1000000000+rand()%(9999999999-1000000000));
        indicekey=keyUnica.size();
        ////////////////////////////BUSCAR SI EXISTE LA KEY.
        for(int i=1; i<keyUnica.size()-1; i++){
            if(keyUnica[indicekey].key==keyUnica[i].key){
                repetido=true;
                x++;
            }
        }
    }
}

void MenuModifCuenta(perfil& cambiar, int elegir){
    cout<<endl;
    cout<<"1. Cambiar nombre de Usuario" <<endl;
    cout<<"2. Cambiar contrasena" <<endl;
    cout<<"3. Eliminar cuenta" <<endl;
    cout<<"4. Menu Principal" <<endl;
    cin>>elegir;
    cout<<"----------------------------------------------";

}

void CambiarUser(perfil& cuenta, perfil login){
   ///////////////////////BUSCAR POSICION DE LA CUENTA;
    int indice;
    string usuario;
    for(int i=0; i<cuenta.user.size(); i++){
        if(cuenta[i].user==login.user){
            indice=i;
        }
    }

    cout<<"Introduce el nuevo nombre de usuario: ";
    cin>>usuario;
    cuenta[indice].user=usuario;
    cout<<"El nombre de usuario se ha modificado"; <<endl;
    cout<<"--------------------------------------------";
}

void CambiarContra(perfil& cuenta, perfil login){
    ///////////////////////BUSCAR POSICION DE LA CUENTA;
    int indice;
    int password;
    string contrasena;
    string contrasena2;
    bool coincide==false;
    for(int i=0; i<cuenta.user.size(); i++){
        if(cuenta[i].user==login.user){
            indice=i;
        }
    }
    while(coincide==false){
        cout<<endl <<"Introduce la nueva contrasena: ";
        cin>>contrasena;
        cout<<endl <<"Vuelve a introducir la nueva contrasena: ";
        cin>>contrasena2;
        if(contrasena==contrasena2){
            cuenta[indice].contrasena=contrasena2;
            coincide=true;
        }else{
            cout<<"Las contrasenas introducidas no coinciden, prueba otra vez. ";
        }
    }
    cout<<"El nombre de usuario se ha modificado"; <<endl;
    cout<<"-----------------------------------------------";

}

void MenuBorrarCuenta(int elegir){
    cout<<endl <<"¿Estas seguro/a que quieres eliminar la cuenta? Si lo haces se eliminarán todos los datos y se cerrará el programa."
    cout<<endl <<"1. SI y salir del programa ";
    cout<<endl <<"2. NO, llevame al menu principal ";
    cin>> elegir;
    cout<<"---------------------------------------------";
}

void BorrarCuenta(perfil& cuenta, perfil login){
    ///////////////////////BUSCAR POSICION DE LA CUENTA;
    int indice;
    for(int i=0; i<cuenta.user.size(); i++){
        if(cuenta[i].user==login.user){
            indice=i;
        }
    }
    cuenta.user.swap(indice);
    cout<<endl <<"La cuenta de Usuario se ha eliminado";
    cout<<endl <<"Adios";
    return 0;

}

void ValorarJuego(perfil& cuenta, juego& juego, int indice, int elegir){
    bool segundoclick=false;
    if(elegir==1){
        juego[indice].valorar_gusta+=1;
        segundoclick=true;
    }
    if(elegir==2){
        juego[indice].valorar_no_gusta+=1;
        segundoclick=true;
    }
    if(elegir==1 and segundoclick==true){
        juego[indice].valorar_gusta-=1;
    }
    if(elegir==2 and segundoclick==true){
        juego[indice].valorar_no_gusta-=1;
    }
}

void JuegosComprados(perfil cuenta, int indice, int elegir){
    cout<<endl <<"LISTA DE JUEGOS COMPRADOS " <<endl;
    for(int i=0; i<perfil.compras.size(); i++){
        cout<<i <<". " <<perfil[indice].compras[i] <<endl;
    }
    cout<<"-----------------------------------------------";
    cout<<endl;
    cout<<"1. Ver informacion juego" <<endl;
    cout<<"2. Ver key del juego";
    /////////////ME CAGO EN LA PUTA COMO PUEDO HACER ESTO FÁCIL?????????????
}
//void dineroUsuario(perfil& x); //dinero disponible de una cuenta y restarlo cuando se compre un juego.
//void preferenciaUsuario(perfil& x); //mode de las categorias de los juegos que ha comprado.
////void juegosUsuario(perfi& x); //juegos que ha adquirido el usuario.
//
// void juegosusuario(vector <string> compras){
//    cout<<"------------------------------------------" <<endl;
//    cout<<"Lista de juegos comprados con esta cuenta: ";
//    for(int i=0; i<compras.size(); i++){
//        cout<<compras[i] <<endl;
//    }
// }
//
//void categoriaJuegos(tienda& x); //juegos que hay en cada categoria.
//void infoJuego(tienda& x); //informacion relacionada con el juego (precio, descripcion, stock, valoracion).
//void comprarJuego(tienda& x, perfil& x); //restar stock, mostrar key, restar dinero usuario, añadir a compras, añadir categoria en moda.
//void valorarJuego(tienda& x, perfil& x);
////void generarKey(tienda& x);
//
//void menu1(); //cuenta, categoria de juegos, buscar juego, preferencias usuario, salir.
//void menu11(); //mostrar categorias de juegos, menu1.
//void menu13(); //mostrar fondos disponibles, añadir fondos, juegos comprados, eliminar cuenta, modificar cuenta, menu1.
//void menu14(); //mostrar preferencias del usuario, menu1.
//void menu15(); //mostrar que quieres modificar de la cuenta.

int main(){
    perfil login;
    vector<perfil> guardarcuentas;
    bool verificar=false;
    int elegir;
    string categoria;
    int indice;
//CREAR CUENTA ADMIN.
    perfil admin;
    admin.user= "admin";
    admin.contrasena= "admin";
    guardarcuentas.push_back(admin);
//////////////////////
    existecuentausuario(login, guardarcuentas, verificar);
    while(verificar==false){
        menuUsuarionoExist(elegir);
        if(elegir==1)existecuentausuario(login, guardarcuentas, verificar);
        if(elegir==2){
            crearNuevoUsuario(login, guardarcuentas, login, verificar);
            existecuentausuario(login, guardarcuentas, verificar);
        }
    }
    cout<<"Bienvenido, " <<login.user <<". " <<endl;

    //MenuPrincipal(elegir, categoria);
    //categoriaJuegos(categoria, elegir);
    //prefUsuario(login);
    srand(time(NULL));
}


